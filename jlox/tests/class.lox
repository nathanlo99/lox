class Test {
  init(a, b) {
    this.a = a;
    this.b = b * b;
  }

  print() {
    println("Hello, my things are " + this.a + " and " + this.b);
  }
}

fun run() {
  var test = Test(2, 3);
  test.print(); // "Hello, my things are 2 and 9"
}
run(); // Make sure normal functions aren't messed up

class Math {
  init(num) {
    this.num = num;
  }

  static square(n) {
    return n * n;
  }

  get() {
    return this.num;
  }
}

assert(Math.square(3) == 9);
assert(Math(3).get() == 3);

println("Result 1: " + Math.square(3)); // 9
// println("Result 2: " + Math().square(3)); // ERROR
println("Result 3: " + Math(3).get()); // 3
// println("Result 4: " + Math.get()); // ERROR

class Circle {
  init(radius) {
    this.radius = radius;
  }

  area {
    return 3.141592653 * this.radius * this.radius;
  }
}

var circle = Circle(4);
println(circle.area); // Prints roughly "50.2655".

// Getter chaining?

class Chain {
  init(nxt) {
    this.nxt = nxt;
  }

  next {
    // println("Getting next for " + this);
    return this.nxt;
  }
}

var test = Chain(Chain(Chain(Chain(nil))));
println(test.next.next.next.next);

class Counter {
  static {
    println("This is the static block running");
    this._counter = 0;
  }

  init() {
    Counter._counter = Counter._counter + 1;
  }

  static counter {
    println("Running accessor");
    return Counter._counter;
  }
}

var test_counter_1 = Counter();
var test_counter_2 = Counter();
var test_counter_3 = Counter();
var test_counter_4 = Counter();
var test_counter_5 = Counter();
var test_counter_6 = Counter();
var test_counter_7 = Counter();
var test_counter_8 = Counter();
println(Counter.counter);

class Weird {
  init(n) {
    this.n = n;
  }

  callback {
    fun adder(x) {
      return this.n + x;
    }
    return adder;
  }
}

var weird = Weird(10);
println(weird.callback(5));
